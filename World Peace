/*
Name:			Daniel Martin and Dylan Lacy
Date:			08.21.18
Description:	Has a list of passwords which have different functions if different things are typed in.
*/

#include<iostream> //Saves typing
#include<string>  //Used to incorperate strings
#include<windows.h> //Used for Sleep method
#include<cstdlib> //Used for 

using namespace std; 


//These two methods print out words, letter by letter. The speeds are dependent on the Sleep(args[0]); method
void pOverride(string out) {
	for (int i = 0; i < out.length(); i++) {
		Sleep(2);
		cout << out.at(i);
	}
}

void display(string out) {
	for (int i = 0; i < out.length(); i++) {
		Sleep(20);
		cout << out.at(i);
	}
}

//This method will create a list of random numbers
void randNumber(string out) {
	for (int i = 0; i < 100; i++) {
		display(0);
	}
}
 
int main()
{

	//variables
	string password2 = "@Override";
	string password1 = "password123";
	string password = "";
	string size1 = "small";
	string size2 = "medium";
	string size3 = "large";
	string size = "";
	string location = "";
	int numberOfNukes = 0;
	int population = 0;
	
	int hold;

	//User interaction
	display("Please enter the password: ");
	cin >> password;
	if ( password == password1) { //This is ran if "password123" is typed as the password.
		display("Welcome. ");
		Sleep(20);

		display("Which country would you like to give money to: ");
		cin >> location;
		Sleep(500);

		display("How many people live in " + location + "? ");
		cin >> population;
		Sleep(1000);

		display("What is the magnitude of this donation(ex: small, medium, or large)? ");
		cin >> size;
		Sleep(1000);
		system("CLS");
		cout << endl;

		cout << "Accessing account.";
		cout << endl;
		Sleep(1000);
		system("CLS");
		cout << "Accessing account..";
		cout << endl;
		Sleep(1000);
		system("CLS");
		cout << "Accessing account...";
		Sleep(1000);

		cout << endl;
		cout << "Transfering funds.";
		cout << endl;
		Sleep(1000);
		system("CLS");
		cout << "Transfering funds..";
		cout << endl;
		Sleep(1000);
		system("CLS");
		cout << "Transfering funds...";
		Sleep(1000);
		system("CLS");

		display("Transfer complete");
		Sleep(1000);
		system("CLS");
		if (size == size1 || size == "s" || size == "S") {
			//calculations
			population = (population * .75);
			string newPopulation = to_string(population);
			display("You have successfully donated to " + location + ", with 25% of the population richer, the current poverty number is " + newPopulation + ".");
		} 
		else if (size == size2 || size == "m" || size == "M") {
			population = (population * .50);
			string newPopulation = to_string(population);
			display("You have successfully donated to " + location + ", with 50% of the population richer, the current poverty number is " + newPopulation + ".");
		} 
		else if (size == size3 || size == "l" || size == "L") {
			population = (population * .25);
			string newPopulation = to_string(population);
			display("You have successfully donated to " + location + ", with 75% of the population richer, the current poverty number is " + newPopulation + ".");
		}
		else {
			display("That is not a valid option. Process terminated.");
		}
		cout << endl;
		display("Thank you for your generosity.");


		cin >> hold; //Prevents console from closing
	}
	else if(password == password2) { // This is ran if "@Override;randomize.stringRDM.disarm()" is typed as the password
		display("Password incorrect. Self Destruct has been activated. Goodbye.");
		cout << endl;

		display("3");
		cout << endl;
		Sleep(500);

		display("2");
		cout << endl;
		Sleep(5000);

		display("Please enter the password: ");
		cout << endl;
		Sleep(2500);

		display("Password Override has started.");
		Sleep(1000);

		system("CLS"); // Clears the console, just to clean it up.

		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("73658104");
		cout << endl;
		pOverride("34245791");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl;
		pOverride("43627910");
		cout << endl;
		pOverride("43674239");
		cout << endl;
		pOverride("42358947");
		cout << endl;
		pOverride("77632491");
		cout << endl;
		pOverride("03284621");
		cout << endl;
		pOverride("02384661");
		cout << endl;
		pOverride("27874839");
		cout << endl;
		pOverride("87594523");
		cout << endl;
		pOverride("76328192");
		cout << endl;
		pOverride("52734328");
		cout << endl;
		pOverride("46728348");
		cout << endl;
		pOverride("12356842");
		cout << endl;
		pOverride("97803471");
		cout << endl;
		pOverride("01357824");
		cout << endl;
		pOverride("36795321");
		cout << endl;
		pOverride("34692104");
		cout << endl;
		pOverride("46270023");
		cout << endl;
		pOverride("03846810");
		cout << endl;
		pOverride("78934801");
		cout << endl;
		pOverride("90424672");
		cout << endl;
		pOverride("38109736");
		cout << endl;
		pOverride("10432678");
		cout << endl;
		pOverride("04364232");
		cout << endl;
		pOverride("16237944");
		cout << endl;
		pOverride("75236737");
		cout << endl;
		pOverride("43268750");
		cout << endl;
		pOverride("21547310");
		cout << endl; 
		Sleep(1000);
		system("CLS");
		display("Welcome. ");
		Sleep(20);

		display("Which country would you like to give money to: ");
		cin >> location;
		Sleep(500);

		display("How many people live in " + location + "? ");
		cin >> population;
		Sleep(1000);

		display("What is the magnitude of this donation(ex: small, medium, or large)? ");
		cin >> size;
		Sleep(1000);
		system("CLS");
		cout << endl;

		cout << "Accessing account.";
		cout << endl;
		Sleep(1000);
		system("CLS");
		cout << "Accessing account..";
		cout << endl;
		Sleep(1000);
		system("CLS");
		cout << "Accessing account...";
		Sleep(1000);
		system("CLS");

		cout << endl;
		cout << "Transfering funds.";
		cout << endl;
		Sleep(1000);
		system("CLS");
		cout << "Transfering funds..";
		cout << endl;
		Sleep(1000);
		system("CLS");
		cout << "Transfering funds...";
		Sleep(1000);
		system("CLS");

		display("Transfer complete");
		Sleep(1000);
		system("CLS");
		if (size == size1 || size == "s" || size == "S") {
			//calculations
			population = (population * .75);
			string newPopulation = to_string(population);
			display("You have successfully donated to " + location + ", with 25% of the population richer, the current poverty number is " + newPopulation + ".");
		}
		else if (size == size2 || size == "m" || size == "M") {
			population = (population * .50);
			string newPopulation = to_string(population);
			display("You have successfully donated to " + location + ", with 50% of the population richer, the current poverty number is " + newPopulation + ".");
		}
		else if (size == size3 || size == "l" || size == "L") {
			population = (population * .25);
			string newPopulation = to_string(population);
			display("You have successfully donated to " + location + ", with 75% of the population richer, the current poverty number is " + newPopulation + ".");
		}
		else {
			display("That is not a valid option. Process terminated.");
		}
		cout << endl;
		display("Thank you for your generosity.");

		cin >> hold; //Prevents console from closing
		return 0;
	}
	else {
		display("Password incorrect. Self Destruct has been activated. Goodbye.");
		cout << endl;
		display("3");
		cout << endl;
		Sleep(500);
		display("2");
		cout << endl;
		Sleep(500);
		display("1");
		cout << endl;
		Sleep(500);
		cout << "*EXPLOSIONNNNN*" << endl;
		Sleep(500);

		cout << "                   ____/ (  (    )   )  \___" << endl;
		cout << "                 /( (  (  )   _    ))  )   )\"" << endl;
		cout << "               ((     (   )(    )  )   (   )  )" << endl;
		cout << "             ((/  ( _(   )   (   _) ) (  () )  )" << endl;
		cout << "            ( (  ( (_)   ((    (   )  .((_ ) .  )_" << endl;
		cout << "           ( (  )    (      (  )    )   ) . ) (   )" << endl;
		cout << "           (  (   (  (   ) (  _  ( _) ).  ) . ) ) ( )" << endl;
		cout << "          ( (  (   ) (  )   (  ))     ) _)(   )  )  )" << endl;
		cout << "         ( (  ( \ ) (    (_  ( ) ( )  )   ) )  )) ( )" << endl;
		cout << "          (  (   (  (   (_ ( ) ( _    )  ) (  )  )   )" << endl;
		cout << "         ( (  ( (  (  )     (_  )  ) )  _)   ) _( ( )" << endl;
		cout << "          ((  (   )(    (     _    )   _) _(_ (  (_ )" << endl;
		cout << "           (_((__(_(__(( ( ( |  ) ) ) )_))__))_)___)" << endl;
		cout << "           ((__)        \\||lll|l||/-/          \_))" << endl;
		cout << "                    (   /(/ (  )  ) )\   )" << endl;
		cout << "                  (    ( ( ( | | ) ) )\   )" << endl;
		cout << "                   (   /(| / ( )) ) ) )) )" << endl;
		cout << "                 (     ( ((((_(|)_)))))    ) " << endl;
		cout << "                  (      ||\(|(|)|/||     )" << endl;
		cout << "                (        |(||(||)||||        )" << endl;
		cout << "                   (     /|//|||)|\\ \     )" << endl;
		cout << "                (/ / -/  ///|||||\\  \ \  \ _)" << endl;
		cin >> hold;
	}

}
